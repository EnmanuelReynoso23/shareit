rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Reglas para colección de usuarios
    match /users/{userId} {
      allow read: if request.auth != null && (
        request.auth.uid == userId ||
        // Los amigos pueden leer información básica
        exists(/databases/$(database)/documents/friends/{friendshipId}) &&
        get(/databases/$(database)/documents/friends/{friendshipId}).data.users.hasAll([request.auth.uid, userId]) &&
        get(/databases/$(database)/documents/friends/{friendshipId}).data.status == 'accepted'
      );
      
      allow write: if request.auth != null && request.auth.uid == userId;
      
      // Permitir búsqueda de usuarios por email (limitada)
      allow read: if request.auth != null && 
        resource.data.keys().hasOnly(['email', 'displayName', 'photoURL', 'bio']);
    }
    
    // Reglas para colección de widgets
    match /widgets/{widgetId} {
      allow read: if request.auth != null && (
        request.auth.uid == resource.data.userId ||
        request.auth.uid in resource.data.sharedWith ||
        resource.data.shareSettings.public == true
      );
      
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
      
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    
    // Reglas para colección de fotos
    match /photos/{photoId} {
      allow read: if request.auth != null && (
        request.auth.uid == resource.data.userId ||
        request.auth.uid in resource.data.sharedWith ||
        resource.data.isPublic == true
      );
      
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
      
      allow update: if request.auth != null && (
        request.auth.uid == resource.data.userId ||
        // Los amigos pueden dar like y comentar
        request.auth.uid in resource.data.sharedWith
      );
      
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    
    // Reglas para colección de amistades
    match /friends/{friendshipId} {
      allow read: if request.auth != null && 
        request.auth.uid in resource.data.users;
      
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.requestedBy &&
        request.auth.uid in request.resource.data.users;
      
      allow update: if request.auth != null && 
        request.auth.uid in resource.data.users &&
        request.auth.uid != resource.data.requestedBy;
      
      allow delete: if request.auth != null && 
        request.auth.uid in resource.data.users;
    }
    
    // Reglas para colección de chats
    match /chats/{chatId} {
      allow read, write: if request.auth != null && 
        request.auth.uid in resource.data.participants;
      
      allow create: if request.auth != null && 
        request.auth.uid in request.resource.data.participants;
      
      // Reglas para mensajes dentro de chats
      match /messages/{messageId} {
        allow read: if request.auth != null && 
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
        
        allow create: if request.auth != null && 
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants &&
          request.auth.uid == request.resource.data.senderId;
        
        allow update: if request.auth != null && 
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants &&
          (
            request.auth.uid == resource.data.senderId ||
            // Solo actualizar readBy
            request.resource.data.diff(resource.data).affectedKeys().hasOnly(['readBy'])
          );
        
        allow delete: if request.auth != null && 
          request.auth.uid == resource.data.senderId;
      }
    }
    
    // Reglas para notificaciones
    match /notifications/{notificationId} {
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      
      allow create: if request.auth != null;
      
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    
    // Reglas para configuración de la app
    match /app_config/{document} {
      allow read: if request.auth != null;
      allow write: if false; // Solo admin puede escribir
    }
    
    // Reglas para reportes y moderación
    match /reports/{reportId} {
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.reportedBy;
      
      allow read, update, delete: if false; // Solo admin
    }
    
    // Reglas para analytics (solo lectura para usuarios autenticados)
    match /analytics/{document} {
      allow read: if request.auth != null;
      allow write: if false; // Solo funciones pueden escribir
    }
  }
}

// Funciones helper para validaciones
function isValidEmail(email) {
  return email.matches('.*@.*\\..*');
}

function isValidPhoneNumber(phone) {
  return phone.matches('\\+?[1-9]\\d{1,14}');
}

function isValidURL(url) {
  return url.matches('https://.*');
}

function isOwnerOrShared(userId, sharedWith) {
  return request.auth.uid == userId || request.auth.uid in sharedWith;
}

function isValidWidgetType(type) {
  return type in ['clock', 'calendar', 'battery', 'photos', 'notes', 'reminders', 'status'];
}

function isValidMessageType(type) {
  return type in ['text', 'image', 'widget', 'system'];
}
